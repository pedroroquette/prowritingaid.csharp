/* 
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ProWritingAid.SDK.Client.SwaggerDateConverter;

namespace ProWritingAid.SDK.Model
{
    /// <summary>
    /// AnalysisSettings
    /// </summary>
    [DataContract]
    public partial class AnalysisSettings :  IEquatable<AnalysisSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnalysisSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisSettings" /> class.
        /// </summary>
        /// <param name="ShortestAverageSentenceLength">ShortestAverageSentenceLength (required) (default to 11).</param>
        /// <param name="LongestAverageSentenceLength">LongestAverageSentenceLength (required) (default to 18).</param>
        /// <param name="LongestIndividualSentence">LongestIndividualSentence (required) (default to 30).</param>
        /// <param name="HighestPassiveIndex">HighestPassiveIndex (required) (default to 25).</param>
        /// <param name="MaxGlueIndex">MaxGlueIndex (required) (default to 40).</param>
        /// <param name="MinSentenceVariety">MinSentenceVariety (required) (default to 3).</param>
        /// <param name="HighestPronounPercentage">HighestPronounPercentage (required) (default to 15.0).</param>
        /// <param name="LowestPronounPercentage">LowestPronounPercentage (required) (default to 4.0).</param>
        /// <param name="HighestAcademicPronounPercentage">HighestAcademicPronounPercentage (required) (default to 2.0).</param>
        /// <param name="HighestInitialPronounPercentage">HighestInitialPronounPercentage (required) (default to 30.0).</param>
        /// <param name="LowestInitialPronounPercentage">LowestInitialPronounPercentage (required) (default to 0.0).</param>
        /// <param name="LowestWeWeScore">LowestWeWeScore (required) (default to 0.6).</param>
        /// <param name="LongestAverageParagraphLength">LongestAverageParagraphLength (required) (default to 6.0).</param>
        public AnalysisSettings(int? ShortestAverageSentenceLength = 11, int? LongestAverageSentenceLength = 18, int? LongestIndividualSentence = 30, int? HighestPassiveIndex = 25, int? MaxGlueIndex = 40, int? MinSentenceVariety = 3, double? HighestPronounPercentage = 15.0, double? LowestPronounPercentage = 4.0, double? HighestAcademicPronounPercentage = 2.0, double? HighestInitialPronounPercentage = 30.0, double? LowestInitialPronounPercentage = 0.0, double? LowestWeWeScore = 0.6, double? LongestAverageParagraphLength = 6.0)
        {
            // to ensure "ShortestAverageSentenceLength" is required (not null)
            if (ShortestAverageSentenceLength == null)
            {
                throw new InvalidDataException("ShortestAverageSentenceLength is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.ShortestAverageSentenceLength = ShortestAverageSentenceLength;
            }
            // to ensure "LongestAverageSentenceLength" is required (not null)
            if (LongestAverageSentenceLength == null)
            {
                throw new InvalidDataException("LongestAverageSentenceLength is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.LongestAverageSentenceLength = LongestAverageSentenceLength;
            }
            // to ensure "LongestIndividualSentence" is required (not null)
            if (LongestIndividualSentence == null)
            {
                throw new InvalidDataException("LongestIndividualSentence is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.LongestIndividualSentence = LongestIndividualSentence;
            }
            // to ensure "HighestPassiveIndex" is required (not null)
            if (HighestPassiveIndex == null)
            {
                throw new InvalidDataException("HighestPassiveIndex is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.HighestPassiveIndex = HighestPassiveIndex;
            }
            // to ensure "MaxGlueIndex" is required (not null)
            if (MaxGlueIndex == null)
            {
                throw new InvalidDataException("MaxGlueIndex is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.MaxGlueIndex = MaxGlueIndex;
            }
            // to ensure "MinSentenceVariety" is required (not null)
            if (MinSentenceVariety == null)
            {
                throw new InvalidDataException("MinSentenceVariety is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.MinSentenceVariety = MinSentenceVariety;
            }
            // to ensure "HighestPronounPercentage" is required (not null)
            if (HighestPronounPercentage == null)
            {
                throw new InvalidDataException("HighestPronounPercentage is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.HighestPronounPercentage = HighestPronounPercentage;
            }
            // to ensure "LowestPronounPercentage" is required (not null)
            if (LowestPronounPercentage == null)
            {
                throw new InvalidDataException("LowestPronounPercentage is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.LowestPronounPercentage = LowestPronounPercentage;
            }
            // to ensure "HighestAcademicPronounPercentage" is required (not null)
            if (HighestAcademicPronounPercentage == null)
            {
                throw new InvalidDataException("HighestAcademicPronounPercentage is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.HighestAcademicPronounPercentage = HighestAcademicPronounPercentage;
            }
            // to ensure "HighestInitialPronounPercentage" is required (not null)
            if (HighestInitialPronounPercentage == null)
            {
                throw new InvalidDataException("HighestInitialPronounPercentage is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.HighestInitialPronounPercentage = HighestInitialPronounPercentage;
            }
            // to ensure "LowestInitialPronounPercentage" is required (not null)
            if (LowestInitialPronounPercentage == null)
            {
                throw new InvalidDataException("LowestInitialPronounPercentage is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.LowestInitialPronounPercentage = LowestInitialPronounPercentage;
            }
            // to ensure "LowestWeWeScore" is required (not null)
            if (LowestWeWeScore == null)
            {
                throw new InvalidDataException("LowestWeWeScore is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.LowestWeWeScore = LowestWeWeScore;
            }
            // to ensure "LongestAverageParagraphLength" is required (not null)
            if (LongestAverageParagraphLength == null)
            {
                throw new InvalidDataException("LongestAverageParagraphLength is a required property for AnalysisSettings and cannot be null");
            }
            else
            {
                this.LongestAverageParagraphLength = LongestAverageParagraphLength;
            }
        }
        
        /// <summary>
        /// Gets or Sets ShortestAverageSentenceLength
        /// </summary>
        [DataMember(Name="ShortestAverageSentenceLength", EmitDefaultValue=false)]
        public int? ShortestAverageSentenceLength { get; set; }

        /// <summary>
        /// Gets or Sets LongestAverageSentenceLength
        /// </summary>
        [DataMember(Name="LongestAverageSentenceLength", EmitDefaultValue=false)]
        public int? LongestAverageSentenceLength { get; set; }

        /// <summary>
        /// Gets or Sets LongestIndividualSentence
        /// </summary>
        [DataMember(Name="LongestIndividualSentence", EmitDefaultValue=false)]
        public int? LongestIndividualSentence { get; set; }

        /// <summary>
        /// Gets or Sets HighestPassiveIndex
        /// </summary>
        [DataMember(Name="HighestPassiveIndex", EmitDefaultValue=false)]
        public int? HighestPassiveIndex { get; set; }

        /// <summary>
        /// Gets or Sets MaxGlueIndex
        /// </summary>
        [DataMember(Name="MaxGlueIndex", EmitDefaultValue=false)]
        public int? MaxGlueIndex { get; set; }

        /// <summary>
        /// Gets or Sets MinSentenceVariety
        /// </summary>
        [DataMember(Name="MinSentenceVariety", EmitDefaultValue=false)]
        public int? MinSentenceVariety { get; set; }

        /// <summary>
        /// Gets or Sets HighestPronounPercentage
        /// </summary>
        [DataMember(Name="HighestPronounPercentage", EmitDefaultValue=false)]
        public double? HighestPronounPercentage { get; set; }

        /// <summary>
        /// Gets or Sets LowestPronounPercentage
        /// </summary>
        [DataMember(Name="LowestPronounPercentage", EmitDefaultValue=false)]
        public double? LowestPronounPercentage { get; set; }

        /// <summary>
        /// Gets or Sets HighestAcademicPronounPercentage
        /// </summary>
        [DataMember(Name="HighestAcademicPronounPercentage", EmitDefaultValue=false)]
        public double? HighestAcademicPronounPercentage { get; set; }

        /// <summary>
        /// Gets or Sets HighestInitialPronounPercentage
        /// </summary>
        [DataMember(Name="HighestInitialPronounPercentage", EmitDefaultValue=false)]
        public double? HighestInitialPronounPercentage { get; set; }

        /// <summary>
        /// Gets or Sets LowestInitialPronounPercentage
        /// </summary>
        [DataMember(Name="LowestInitialPronounPercentage", EmitDefaultValue=false)]
        public double? LowestInitialPronounPercentage { get; set; }

        /// <summary>
        /// Gets or Sets LowestWeWeScore
        /// </summary>
        [DataMember(Name="LowestWeWeScore", EmitDefaultValue=false)]
        public double? LowestWeWeScore { get; set; }

        /// <summary>
        /// Gets or Sets LongestAverageParagraphLength
        /// </summary>
        [DataMember(Name="LongestAverageParagraphLength", EmitDefaultValue=false)]
        public double? LongestAverageParagraphLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisSettings {\n");
            sb.Append("  ShortestAverageSentenceLength: ").Append(ShortestAverageSentenceLength).Append("\n");
            sb.Append("  LongestAverageSentenceLength: ").Append(LongestAverageSentenceLength).Append("\n");
            sb.Append("  LongestIndividualSentence: ").Append(LongestIndividualSentence).Append("\n");
            sb.Append("  HighestPassiveIndex: ").Append(HighestPassiveIndex).Append("\n");
            sb.Append("  MaxGlueIndex: ").Append(MaxGlueIndex).Append("\n");
            sb.Append("  MinSentenceVariety: ").Append(MinSentenceVariety).Append("\n");
            sb.Append("  HighestPronounPercentage: ").Append(HighestPronounPercentage).Append("\n");
            sb.Append("  LowestPronounPercentage: ").Append(LowestPronounPercentage).Append("\n");
            sb.Append("  HighestAcademicPronounPercentage: ").Append(HighestAcademicPronounPercentage).Append("\n");
            sb.Append("  HighestInitialPronounPercentage: ").Append(HighestInitialPronounPercentage).Append("\n");
            sb.Append("  LowestInitialPronounPercentage: ").Append(LowestInitialPronounPercentage).Append("\n");
            sb.Append("  LowestWeWeScore: ").Append(LowestWeWeScore).Append("\n");
            sb.Append("  LongestAverageParagraphLength: ").Append(LongestAverageParagraphLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AnalysisSettings);
        }

        /// <summary>
        /// Returns true if AnalysisSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalysisSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShortestAverageSentenceLength == other.ShortestAverageSentenceLength ||
                    this.ShortestAverageSentenceLength != null &&
                    this.ShortestAverageSentenceLength.Equals(other.ShortestAverageSentenceLength)
                ) && 
                (
                    this.LongestAverageSentenceLength == other.LongestAverageSentenceLength ||
                    this.LongestAverageSentenceLength != null &&
                    this.LongestAverageSentenceLength.Equals(other.LongestAverageSentenceLength)
                ) && 
                (
                    this.LongestIndividualSentence == other.LongestIndividualSentence ||
                    this.LongestIndividualSentence != null &&
                    this.LongestIndividualSentence.Equals(other.LongestIndividualSentence)
                ) && 
                (
                    this.HighestPassiveIndex == other.HighestPassiveIndex ||
                    this.HighestPassiveIndex != null &&
                    this.HighestPassiveIndex.Equals(other.HighestPassiveIndex)
                ) && 
                (
                    this.MaxGlueIndex == other.MaxGlueIndex ||
                    this.MaxGlueIndex != null &&
                    this.MaxGlueIndex.Equals(other.MaxGlueIndex)
                ) && 
                (
                    this.MinSentenceVariety == other.MinSentenceVariety ||
                    this.MinSentenceVariety != null &&
                    this.MinSentenceVariety.Equals(other.MinSentenceVariety)
                ) && 
                (
                    this.HighestPronounPercentage == other.HighestPronounPercentage ||
                    this.HighestPronounPercentage != null &&
                    this.HighestPronounPercentage.Equals(other.HighestPronounPercentage)
                ) && 
                (
                    this.LowestPronounPercentage == other.LowestPronounPercentage ||
                    this.LowestPronounPercentage != null &&
                    this.LowestPronounPercentage.Equals(other.LowestPronounPercentage)
                ) && 
                (
                    this.HighestAcademicPronounPercentage == other.HighestAcademicPronounPercentage ||
                    this.HighestAcademicPronounPercentage != null &&
                    this.HighestAcademicPronounPercentage.Equals(other.HighestAcademicPronounPercentage)
                ) && 
                (
                    this.HighestInitialPronounPercentage == other.HighestInitialPronounPercentage ||
                    this.HighestInitialPronounPercentage != null &&
                    this.HighestInitialPronounPercentage.Equals(other.HighestInitialPronounPercentage)
                ) && 
                (
                    this.LowestInitialPronounPercentage == other.LowestInitialPronounPercentage ||
                    this.LowestInitialPronounPercentage != null &&
                    this.LowestInitialPronounPercentage.Equals(other.LowestInitialPronounPercentage)
                ) && 
                (
                    this.LowestWeWeScore == other.LowestWeWeScore ||
                    this.LowestWeWeScore != null &&
                    this.LowestWeWeScore.Equals(other.LowestWeWeScore)
                ) && 
                (
                    this.LongestAverageParagraphLength == other.LongestAverageParagraphLength ||
                    this.LongestAverageParagraphLength != null &&
                    this.LongestAverageParagraphLength.Equals(other.LongestAverageParagraphLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShortestAverageSentenceLength != null)
                    hash = hash * 59 + this.ShortestAverageSentenceLength.GetHashCode();
                if (this.LongestAverageSentenceLength != null)
                    hash = hash * 59 + this.LongestAverageSentenceLength.GetHashCode();
                if (this.LongestIndividualSentence != null)
                    hash = hash * 59 + this.LongestIndividualSentence.GetHashCode();
                if (this.HighestPassiveIndex != null)
                    hash = hash * 59 + this.HighestPassiveIndex.GetHashCode();
                if (this.MaxGlueIndex != null)
                    hash = hash * 59 + this.MaxGlueIndex.GetHashCode();
                if (this.MinSentenceVariety != null)
                    hash = hash * 59 + this.MinSentenceVariety.GetHashCode();
                if (this.HighestPronounPercentage != null)
                    hash = hash * 59 + this.HighestPronounPercentage.GetHashCode();
                if (this.LowestPronounPercentage != null)
                    hash = hash * 59 + this.LowestPronounPercentage.GetHashCode();
                if (this.HighestAcademicPronounPercentage != null)
                    hash = hash * 59 + this.HighestAcademicPronounPercentage.GetHashCode();
                if (this.HighestInitialPronounPercentage != null)
                    hash = hash * 59 + this.HighestInitialPronounPercentage.GetHashCode();
                if (this.LowestInitialPronounPercentage != null)
                    hash = hash * 59 + this.LowestInitialPronounPercentage.GetHashCode();
                if (this.LowestWeWeScore != null)
                    hash = hash * 59 + this.LowestWeWeScore.GetHashCode();
                if (this.LongestAverageParagraphLength != null)
                    hash = hash * 59 + this.LongestAverageParagraphLength.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
