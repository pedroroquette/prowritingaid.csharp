/* 
 * ProWritingAid.API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProWritingAid.SDK.Model
{
    /// <summary>
    /// AnalysisSettings
    /// </summary>
    [DataContract]
    public partial class AnalysisSettings :  IEquatable<AnalysisSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisSettings" /> class.
        /// </summary>
        /// <param name="ShortestAverageSentenceLength">&lt;remarks&gt;Default is 11&lt;/remarks&gt;.</param>
        /// <param name="LongestAverageSentenceLength">&lt;remarks&gt;Default is 18&lt;/remarks&gt;.</param>
        /// <param name="LongestIndividualSentence">&lt;remarks&gt;Default is 30&lt;/remarks&gt;.</param>
        /// <param name="HighestPassiveIndex">&lt;remarks&gt;Default is 25&lt;/remarks&gt;.</param>
        /// <param name="MaxGlueIndex">&lt;remarks&gt;Default is 40&lt;/remarks&gt;.</param>
        /// <param name="MinSentenceVariety">&lt;remarks&gt;Default is 3&lt;/remarks&gt;.</param>
        /// <param name="HighestPronounPercentage">&lt;remarks&gt;Default is 15&lt;/remarks&gt;.</param>
        /// <param name="LowestPronounPercentage">&lt;remarks&gt;Default is 4&lt;/remarks&gt;.</param>
        /// <param name="HighestAcademicPronounPercentage">&lt;remarks&gt;Default is 2&lt;/remarks&gt;.</param>
        /// <param name="HighestInitialPronounPercentage">&lt;remarks&gt;Default is 30&lt;/remarks&gt;.</param>
        /// <param name="LowestInitialPronounPercentage">&lt;remarks&gt;Default is 0&lt;/remarks&gt;.</param>
        /// <param name="LowestWeWeScore">&lt;remarks&gt;Default is .6&lt;/remarks&gt;.</param>
        /// <param name="LongestAverageParagraphLength">&lt;remarks&gt;Default is 6&lt;/remarks&gt;.</param>
        public AnalysisSettings(
            int? ShortestAverageSentenceLength = 11,
            int? LongestAverageSentenceLength = 18,
            int? LongestIndividualSentence = 20,
            int? HighestPassiveIndex = 25,
            int? MaxGlueIndex = 40,
            int? MinSentenceVariety = 3,
            double? HighestPronounPercentage = 15,
            double? LowestPronounPercentage = 4,
            double? HighestAcademicPronounPercentage = 2,
            double? HighestInitialPronounPercentage = 30,
            double? LowestInitialPronounPercentage = 0,
            double? LowestWeWeScore = .6,
            double? LongestAverageParagraphLength = 6)
        {
            this.ShortestAverageSentenceLength = ShortestAverageSentenceLength;
            this.LongestAverageSentenceLength = LongestAverageSentenceLength;
            this.LongestIndividualSentence = LongestIndividualSentence;
            this.HighestPassiveIndex = HighestPassiveIndex;
            this.MaxGlueIndex = MaxGlueIndex;
            this.MinSentenceVariety = MinSentenceVariety;
            this.HighestPronounPercentage = HighestPronounPercentage;
            this.LowestPronounPercentage = LowestPronounPercentage;
            this.HighestAcademicPronounPercentage = HighestAcademicPronounPercentage;
            this.HighestInitialPronounPercentage = HighestInitialPronounPercentage;
            this.LowestInitialPronounPercentage = LowestInitialPronounPercentage;
            this.LowestWeWeScore = LowestWeWeScore;
            this.LongestAverageParagraphLength = LongestAverageParagraphLength;
        }
        
        /// <summary>
        /// &lt;remarks&gt;Default is 11&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 11&lt;/remarks&gt;</value>
        [DataMember(Name="ShortestAverageSentenceLength", EmitDefaultValue=false)]
        public int? ShortestAverageSentenceLength { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 18&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 18&lt;/remarks&gt;</value>
        [DataMember(Name="LongestAverageSentenceLength", EmitDefaultValue=false)]
        public int? LongestAverageSentenceLength { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 30&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 30&lt;/remarks&gt;</value>
        [DataMember(Name="LongestIndividualSentence", EmitDefaultValue=false)]
        public int? LongestIndividualSentence { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 25&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 25&lt;/remarks&gt;</value>
        [DataMember(Name="HighestPassiveIndex", EmitDefaultValue=false)]
        public int? HighestPassiveIndex { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 40&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 40&lt;/remarks&gt;</value>
        [DataMember(Name="MaxGlueIndex", EmitDefaultValue=false)]
        public int? MaxGlueIndex { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 3&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 3&lt;/remarks&gt;</value>
        [DataMember(Name="MinSentenceVariety", EmitDefaultValue=false)]
        public int? MinSentenceVariety { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 15&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 15&lt;/remarks&gt;</value>
        [DataMember(Name="HighestPronounPercentage", EmitDefaultValue=false)]
        public double? HighestPronounPercentage { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 4&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 4&lt;/remarks&gt;</value>
        [DataMember(Name="LowestPronounPercentage", EmitDefaultValue=false)]
        public double? LowestPronounPercentage { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 2&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 2&lt;/remarks&gt;</value>
        [DataMember(Name="HighestAcademicPronounPercentage", EmitDefaultValue=false)]
        public double? HighestAcademicPronounPercentage { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 30&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 30&lt;/remarks&gt;</value>
        [DataMember(Name="HighestInitialPronounPercentage", EmitDefaultValue=false)]
        public double? HighestInitialPronounPercentage { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 0&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 0&lt;/remarks&gt;</value>
        [DataMember(Name="LowestInitialPronounPercentage", EmitDefaultValue=false)]
        public double? LowestInitialPronounPercentage { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is .6&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is .6&lt;/remarks&gt;</value>
        [DataMember(Name="LowestWeWeScore", EmitDefaultValue=false)]
        public double? LowestWeWeScore { get; set; }
        /// <summary>
        /// &lt;remarks&gt;Default is 6&lt;/remarks&gt;
        /// </summary>
        /// <value>&lt;remarks&gt;Default is 6&lt;/remarks&gt;</value>
        [DataMember(Name="LongestAverageParagraphLength", EmitDefaultValue=false)]
        public double? LongestAverageParagraphLength { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisSettings {\n");
            sb.Append("  ShortestAverageSentenceLength: ").Append(ShortestAverageSentenceLength).Append("\n");
            sb.Append("  LongestAverageSentenceLength: ").Append(LongestAverageSentenceLength).Append("\n");
            sb.Append("  LongestIndividualSentence: ").Append(LongestIndividualSentence).Append("\n");
            sb.Append("  HighestPassiveIndex: ").Append(HighestPassiveIndex).Append("\n");
            sb.Append("  MaxGlueIndex: ").Append(MaxGlueIndex).Append("\n");
            sb.Append("  MinSentenceVariety: ").Append(MinSentenceVariety).Append("\n");
            sb.Append("  HighestPronounPercentage: ").Append(HighestPronounPercentage).Append("\n");
            sb.Append("  LowestPronounPercentage: ").Append(LowestPronounPercentage).Append("\n");
            sb.Append("  HighestAcademicPronounPercentage: ").Append(HighestAcademicPronounPercentage).Append("\n");
            sb.Append("  HighestInitialPronounPercentage: ").Append(HighestInitialPronounPercentage).Append("\n");
            sb.Append("  LowestInitialPronounPercentage: ").Append(LowestInitialPronounPercentage).Append("\n");
            sb.Append("  LowestWeWeScore: ").Append(LowestWeWeScore).Append("\n");
            sb.Append("  LongestAverageParagraphLength: ").Append(LongestAverageParagraphLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AnalysisSettings);
        }

        /// <summary>
        /// Returns true if AnalysisSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalysisSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShortestAverageSentenceLength == other.ShortestAverageSentenceLength ||
                    this.ShortestAverageSentenceLength != null &&
                    this.ShortestAverageSentenceLength.Equals(other.ShortestAverageSentenceLength)
                ) && 
                (
                    this.LongestAverageSentenceLength == other.LongestAverageSentenceLength ||
                    this.LongestAverageSentenceLength != null &&
                    this.LongestAverageSentenceLength.Equals(other.LongestAverageSentenceLength)
                ) && 
                (
                    this.LongestIndividualSentence == other.LongestIndividualSentence ||
                    this.LongestIndividualSentence != null &&
                    this.LongestIndividualSentence.Equals(other.LongestIndividualSentence)
                ) && 
                (
                    this.HighestPassiveIndex == other.HighestPassiveIndex ||
                    this.HighestPassiveIndex != null &&
                    this.HighestPassiveIndex.Equals(other.HighestPassiveIndex)
                ) && 
                (
                    this.MaxGlueIndex == other.MaxGlueIndex ||
                    this.MaxGlueIndex != null &&
                    this.MaxGlueIndex.Equals(other.MaxGlueIndex)
                ) && 
                (
                    this.MinSentenceVariety == other.MinSentenceVariety ||
                    this.MinSentenceVariety != null &&
                    this.MinSentenceVariety.Equals(other.MinSentenceVariety)
                ) && 
                (
                    this.HighestPronounPercentage == other.HighestPronounPercentage ||
                    this.HighestPronounPercentage != null &&
                    this.HighestPronounPercentage.Equals(other.HighestPronounPercentage)
                ) && 
                (
                    this.LowestPronounPercentage == other.LowestPronounPercentage ||
                    this.LowestPronounPercentage != null &&
                    this.LowestPronounPercentage.Equals(other.LowestPronounPercentage)
                ) && 
                (
                    this.HighestAcademicPronounPercentage == other.HighestAcademicPronounPercentage ||
                    this.HighestAcademicPronounPercentage != null &&
                    this.HighestAcademicPronounPercentage.Equals(other.HighestAcademicPronounPercentage)
                ) && 
                (
                    this.HighestInitialPronounPercentage == other.HighestInitialPronounPercentage ||
                    this.HighestInitialPronounPercentage != null &&
                    this.HighestInitialPronounPercentage.Equals(other.HighestInitialPronounPercentage)
                ) && 
                (
                    this.LowestInitialPronounPercentage == other.LowestInitialPronounPercentage ||
                    this.LowestInitialPronounPercentage != null &&
                    this.LowestInitialPronounPercentage.Equals(other.LowestInitialPronounPercentage)
                ) && 
                (
                    this.LowestWeWeScore == other.LowestWeWeScore ||
                    this.LowestWeWeScore != null &&
                    this.LowestWeWeScore.Equals(other.LowestWeWeScore)
                ) && 
                (
                    this.LongestAverageParagraphLength == other.LongestAverageParagraphLength ||
                    this.LongestAverageParagraphLength != null &&
                    this.LongestAverageParagraphLength.Equals(other.LongestAverageParagraphLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShortestAverageSentenceLength != null)
                    hash = hash * 59 + this.ShortestAverageSentenceLength.GetHashCode();
                if (this.LongestAverageSentenceLength != null)
                    hash = hash * 59 + this.LongestAverageSentenceLength.GetHashCode();
                if (this.LongestIndividualSentence != null)
                    hash = hash * 59 + this.LongestIndividualSentence.GetHashCode();
                if (this.HighestPassiveIndex != null)
                    hash = hash * 59 + this.HighestPassiveIndex.GetHashCode();
                if (this.MaxGlueIndex != null)
                    hash = hash * 59 + this.MaxGlueIndex.GetHashCode();
                if (this.MinSentenceVariety != null)
                    hash = hash * 59 + this.MinSentenceVariety.GetHashCode();
                if (this.HighestPronounPercentage != null)
                    hash = hash * 59 + this.HighestPronounPercentage.GetHashCode();
                if (this.LowestPronounPercentage != null)
                    hash = hash * 59 + this.LowestPronounPercentage.GetHashCode();
                if (this.HighestAcademicPronounPercentage != null)
                    hash = hash * 59 + this.HighestAcademicPronounPercentage.GetHashCode();
                if (this.HighestInitialPronounPercentage != null)
                    hash = hash * 59 + this.HighestInitialPronounPercentage.GetHashCode();
                if (this.LowestInitialPronounPercentage != null)
                    hash = hash * 59 + this.LowestInitialPronounPercentage.GetHashCode();
                if (this.LowestWeWeScore != null)
                    hash = hash * 59 + this.LowestWeWeScore.GetHashCode();
                if (this.LongestAverageParagraphLength != null)
                    hash = hash * 59 + this.LongestAverageParagraphLength.GetHashCode();
                return hash;
            }
        }
    }

}
