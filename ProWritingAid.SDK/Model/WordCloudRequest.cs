/* 
 * ProWritingAid.API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProWritingAid.SDK.Model
{
    /// <summary>
    /// WordCloudRequest
    /// </summary>
    [DataContract]
    public partial class WordCloudRequest : AnalysisRequestBase, IEquatable<WordCloudRequest>
    {
        /// <summary>
        /// The orientation of the text
        /// </summary>
        /// <value>The orientation of the text</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {
            
            /// <summary>
            /// Enum Horizontal for "Horizontal"
            /// </summary>
            [EnumMember(Value = "Horizontal")]
            Horizontal,
            
            /// <summary>
            /// Enum MostlyHorizontal for "MostlyHorizontal"
            /// </summary>
            [EnumMember(Value = "MostlyHorizontal")]
            MostlyHorizontal,
            
            /// <summary>
            /// Enum Vertical for "Vertical"
            /// </summary>
            [EnumMember(Value = "Vertical")]
            Vertical,
            
            /// <summary>
            /// Enum MostlyVertical for "MostlyVertical"
            /// </summary>
            [EnumMember(Value = "MostlyVertical")]
            MostlyVertical,
            
            /// <summary>
            /// Enum HalfAndHalf for "HalfAndHalf"
            /// </summary>
            [EnumMember(Value = "HalfAndHalf")]
            HalfAndHalf,
            
            /// <summary>
            /// Enum EveryWhichWay for "EveryWhichWay"
            /// </summary>
            [EnumMember(Value = "EveryWhichWay")]
            EveryWhichWay
        }

        /// <summary>
        /// The method to be used for casing
        /// </summary>
        /// <value>The method to be used for casing</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CaseMethodEnum
        {
            
            /// <summary>
            /// Enum PreserveCase for "PreserveCase"
            /// </summary>
            [EnumMember(Value = "PreserveCase")]
            PreserveCase,
            
            /// <summary>
            /// Enum Lowercase for "Lowercase"
            /// </summary>
            [EnumMember(Value = "Lowercase")]
            Lowercase,
            
            /// <summary>
            /// Enum Uppercase for "Uppercase"
            /// </summary>
            [EnumMember(Value = "Uppercase")]
            Uppercase,
            
            /// <summary>
            /// Enum IntelligentCase for "IntelligentCase"
            /// </summary>
            [EnumMember(Value = "IntelligentCase")]
            IntelligentCase
        }

        /// <summary>
        /// Document's writing style
        /// </summary>
        /// <value>Document's writing style</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            
            /// <summary>
            /// Enum NotSet for "NotSet"
            /// </summary>
            [EnumMember(Value = "NotSet")]
            NotSet,
            
            /// <summary>
            /// Enum General for "General"
            /// </summary>
            [EnumMember(Value = "General")]
            General,
            
            /// <summary>
            /// Enum Academic for "Academic"
            /// </summary>
            [EnumMember(Value = "Academic")]
            Academic,
            
            /// <summary>
            /// Enum Business for "Business"
            /// </summary>
            [EnumMember(Value = "Business")]
            Business,
            
            /// <summary>
            /// Enum Technical for "Technical"
            /// </summary>
            [EnumMember(Value = "Technical")]
            Technical,
            
            /// <summary>
            /// Enum Creative for "Creative"
            /// </summary>
            [EnumMember(Value = "Creative")]
            Creative,
            
            /// <summary>
            /// Enum Casual for "Casual"
            /// </summary>
            [EnumMember(Value = "Casual")]
            Casual,
            
            /// <summary>
            /// Enum Web for "Web"
            /// </summary>
            [EnumMember(Value = "Web")]
            Web
        }

        /// <summary>
        /// Document's language  <remarks>  Set correct UK/US language to get region-specific suggestions  </remarks>
        /// </summary>
        /// <value>Document's language  <remarks>  Set correct UK/US language to get region-specific suggestions  </remarks></value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum EnUS for "en_US"
            /// </summary>
            [EnumMember(Value = "en_US")]
            EnUS,
            
            /// <summary>
            /// Enum EnUK for "en_UK"
            /// </summary>
            [EnumMember(Value = "en_UK")]
            EnUK,
            
            /// <summary>
            /// Enum En for "en"
            /// </summary>
            [EnumMember(Value = "en")]
            En,
            
            /// <summary>
            /// Enum Es for "es"
            /// </summary>
            [EnumMember(Value = "es")]
            Es
        }

        /// <summary>
        /// The orientation of the text
        /// </summary>
        /// <value>The orientation of the text</value>
        [DataMember(Name="Orientation", EmitDefaultValue=false)]
        public OrientationEnum? Orientation { get; set; }
        /// <summary>
        /// The method to be used for casing
        /// </summary>
        /// <value>The method to be used for casing</value>
        [DataMember(Name="CaseMethod", EmitDefaultValue=false)]
        public CaseMethodEnum? CaseMethod { get; set; }
        /// <summary>
        /// Document's writing style
        /// </summary>
        /// <value>Document's writing style</value>
        [DataMember(Name="Style", EmitDefaultValue=false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Document's language  <remarks>  Set correct UK/US language to get region-specific suggestions  </remarks>
        /// </summary>
        /// <value>Document's language  <remarks>  Set correct UK/US language to get region-specific suggestions  </remarks></value>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WordCloudRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WordCloudRequest() : base(null) { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WordCloudRequest" /> class.
        /// </summary>
        /// <param name="Text">The text to be turned into a Word Cloud (required).</param>
        /// <param name="Orientation">The orientation of the text (required).</param>
        /// <param name="CaseMethod">The method to be used for casing (required).</param>
        /// <param name="PaletteName">The name of the palette (required).</param>
        /// <param name="MaximumWordCount">the maximum number of words to be created (required).</param>
        /// <param name="RemoveCommonWords">Should Common words be removed from the cloud (required).</param>
        /// <param name="FontName">The name of the font to use (required).</param>
        /// <param name="Width">The width of the image to produce (required).</param>
        /// <param name="Height">The height of the image to produce (required).</param>
        /// <param name="OnlySentimentWords">Only use the sentiment words from the text (required).</param>
        /// <param name="Style">Document&#39;s writing style (required).</param>
        /// <param name="Language">Document&#39;s language  &lt;remarks&gt;  Set correct UK/US language to get region-specific suggestions  &lt;/remarks&gt; (required).</param>
        public WordCloudRequest(
            string Text, 
            OrientationEnum? Orientation, 
            CaseMethodEnum? CaseMethod, 
            string PaletteName, 
            int? MaximumWordCount, 
            bool? RemoveCommonWords, 
            string FontName, 
            int? Width, 
            int? Height, 
            bool? OnlySentimentWords, 
            StyleEnum? Style, 
            LanguageEnum? Language,
            RequestCredentials credentials): base(credentials)
        {
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            // to ensure "Orientation" is required (not null)
            if (Orientation == null)
            {
                throw new InvalidDataException("Orientation is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.Orientation = Orientation;
            }
            // to ensure "CaseMethod" is required (not null)
            if (CaseMethod == null)
            {
                throw new InvalidDataException("CaseMethod is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.CaseMethod = CaseMethod;
            }
            // to ensure "PaletteName" is required (not null)
            if (PaletteName == null)
            {
                throw new InvalidDataException("PaletteName is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.PaletteName = PaletteName;
            }
            // to ensure "MaximumWordCount" is required (not null)
            if (MaximumWordCount == null)
            {
                throw new InvalidDataException("MaximumWordCount is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.MaximumWordCount = MaximumWordCount;
            }
            // to ensure "RemoveCommonWords" is required (not null)
            if (RemoveCommonWords == null)
            {
                throw new InvalidDataException("RemoveCommonWords is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.RemoveCommonWords = RemoveCommonWords;
            }
            // to ensure "FontName" is required (not null)
            if (FontName == null)
            {
                throw new InvalidDataException("FontName is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.FontName = FontName;
            }
            // to ensure "Width" is required (not null)
            if (Width == null)
            {
                throw new InvalidDataException("Width is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.Width = Width;
            }
            // to ensure "Height" is required (not null)
            if (Height == null)
            {
                throw new InvalidDataException("Height is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.Height = Height;
            }
            // to ensure "OnlySentimentWords" is required (not null)
            if (OnlySentimentWords == null)
            {
                throw new InvalidDataException("OnlySentimentWords is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.OnlySentimentWords = OnlySentimentWords;
            }
            // to ensure "Style" is required (not null)
            if (Style == null)
            {
                throw new InvalidDataException("Style is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.Style = Style;
            }
            // to ensure "Language" is required (not null)
            if (Language == null)
            {
                throw new InvalidDataException("Language is a required property for WordCloudRequest and cannot be null");
            }
            else
            {
                this.Language = Language;
            }
        }
        
        /// <summary>
        /// The text to be turned into a Word Cloud
        /// </summary>
        /// <value>The text to be turned into a Word Cloud</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// The name of the palette
        /// </summary>
        /// <value>The name of the palette</value>
        [DataMember(Name="PaletteName", EmitDefaultValue=false)]
        public string PaletteName { get; set; }
        /// <summary>
        /// the maximum number of words to be created
        /// </summary>
        /// <value>the maximum number of words to be created</value>
        [DataMember(Name="MaximumWordCount", EmitDefaultValue=false)]
        public int? MaximumWordCount { get; set; }
        /// <summary>
        /// Should Common words be removed from the cloud
        /// </summary>
        /// <value>Should Common words be removed from the cloud</value>
        [DataMember(Name="RemoveCommonWords", EmitDefaultValue=false)]
        public bool? RemoveCommonWords { get; set; }
        /// <summary>
        /// The name of the font to use
        /// </summary>
        /// <value>The name of the font to use</value>
        [DataMember(Name="FontName", EmitDefaultValue=false)]
        public string FontName { get; set; }
        /// <summary>
        /// The width of the image to produce
        /// </summary>
        /// <value>The width of the image to produce</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }
        /// <summary>
        /// The height of the image to produce
        /// </summary>
        /// <value>The height of the image to produce</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// Only use the sentiment words from the text
        /// </summary>
        /// <value>Only use the sentiment words from the text</value>
        [DataMember(Name="OnlySentimentWords", EmitDefaultValue=false)]
        public bool? OnlySentimentWords { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WordCloudRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  CaseMethod: ").Append(CaseMethod).Append("\n");
            sb.Append("  PaletteName: ").Append(PaletteName).Append("\n");
            sb.Append("  MaximumWordCount: ").Append(MaximumWordCount).Append("\n");
            sb.Append("  RemoveCommonWords: ").Append(RemoveCommonWords).Append("\n");
            sb.Append("  FontName: ").Append(FontName).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  OnlySentimentWords: ").Append(OnlySentimentWords).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WordCloudRequest);
        }

        /// <summary>
        /// Returns true if WordCloudRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of WordCloudRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WordCloudRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Orientation == other.Orientation ||
                    this.Orientation != null &&
                    this.Orientation.Equals(other.Orientation)
                ) && 
                (
                    this.CaseMethod == other.CaseMethod ||
                    this.CaseMethod != null &&
                    this.CaseMethod.Equals(other.CaseMethod)
                ) && 
                (
                    this.PaletteName == other.PaletteName ||
                    this.PaletteName != null &&
                    this.PaletteName.Equals(other.PaletteName)
                ) && 
                (
                    this.MaximumWordCount == other.MaximumWordCount ||
                    this.MaximumWordCount != null &&
                    this.MaximumWordCount.Equals(other.MaximumWordCount)
                ) && 
                (
                    this.RemoveCommonWords == other.RemoveCommonWords ||
                    this.RemoveCommonWords != null &&
                    this.RemoveCommonWords.Equals(other.RemoveCommonWords)
                ) && 
                (
                    this.FontName == other.FontName ||
                    this.FontName != null &&
                    this.FontName.Equals(other.FontName)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.OnlySentimentWords == other.OnlySentimentWords ||
                    this.OnlySentimentWords != null &&
                    this.OnlySentimentWords.Equals(other.OnlySentimentWords)
                ) && 
                (
                    this.Style == other.Style ||
                    this.Style != null &&
                    this.Style.Equals(other.Style)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Orientation != null)
                    hash = hash * 59 + this.Orientation.GetHashCode();
                if (this.CaseMethod != null)
                    hash = hash * 59 + this.CaseMethod.GetHashCode();
                if (this.PaletteName != null)
                    hash = hash * 59 + this.PaletteName.GetHashCode();
                if (this.MaximumWordCount != null)
                    hash = hash * 59 + this.MaximumWordCount.GetHashCode();
                if (this.RemoveCommonWords != null)
                    hash = hash * 59 + this.RemoveCommonWords.GetHashCode();
                if (this.FontName != null)
                    hash = hash * 59 + this.FontName.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.OnlySentimentWords != null)
                    hash = hash * 59 + this.OnlySentimentWords.GetHashCode();
                if (this.Style != null)
                    hash = hash * 59 + this.Style.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                return hash;
            }
        }
    }

}
