/* 
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ProWritingAid.SDK.Client.SwaggerDateConverter;

namespace ProWritingAid.SDK.Model
{
    /** 
    * <summary>AnalysisSummaryItem</summary> 
    */
    [DataContract]
    public partial class AnalysisSummaryItem :  IEquatable<AnalysisSummaryItem>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets IsPositive
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsPositiveEnum
        {
            
            /// <summary>
            /// Enum Positive for "Positive"
            /// </summary>
            [EnumMember(Value = "Positive")]
            Positive,
            
            /// <summary>
            /// Enum Negative for "Negative"
            /// </summary>
            [EnumMember(Value = "Negative")]
            Negative,
            
            /// <summary>
            /// Enum Information for "Information"
            /// </summary>
            [EnumMember(Value = "Information")]
            Information
        }

        /// <summary>
        /// Gets or Sets IsPositive
        /// </summary>
        [DataMember(Name="IsPositive", EmitDefaultValue=false)]
        public IsPositiveEnum? IsPositive { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisSummaryItem" /> class.
        /// </summary>
        /// <param name="Text">Text.</param>
        /// <param name="Graph">Graph.</param>
        /// <param name="Url">Url.</param>
        /// <param name="UrlText">UrlText.</param>
        /// <param name="SubItems">SubItems.</param>
        /// <param name="IsPositive">IsPositive.</param>
        /// <param name="Category">Category.</param>
        /// <param name="NumIssues">NumIssues.</param>
        public AnalysisSummaryItem(string Text = default(string), AnalysisSummaryGraph Graph = default(AnalysisSummaryGraph), string Url = default(string), string UrlText = default(string), List<AnalysisSummarySubItem> SubItems = default(List<AnalysisSummarySubItem>), IsPositiveEnum? IsPositive = default(IsPositiveEnum?), SuggestionCategory Category = default(SuggestionCategory), int? NumIssues = default(int?))
        {
            this.Text = Text;
            this.Graph = Graph;
            this.Url = Url;
            this.UrlText = UrlText;
            this.SubItems = SubItems;
            this.IsPositive = IsPositive;
            this.Category = Category;
            this.NumIssues = NumIssues;
        }
        
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Graph
        /// </summary>
        [DataMember(Name="Graph", EmitDefaultValue=false)]
        public AnalysisSummaryGraph Graph { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UrlText
        /// </summary>
        [DataMember(Name="UrlText", EmitDefaultValue=false)]
        public string UrlText { get; set; }

        /// <summary>
        /// Gets or Sets SubItems
        /// </summary>
        [DataMember(Name="SubItems", EmitDefaultValue=false)]
        public List<AnalysisSummarySubItem> SubItems { get; set; }


        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public SuggestionCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="CategoryName", EmitDefaultValue=false)]
        public string CategoryName { get; private set; }

        /// <summary>
        /// Gets or Sets NumIssues
        /// </summary>
        [DataMember(Name="NumIssues", EmitDefaultValue=false)]
        public int? NumIssues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisSummaryItem {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Graph: ").Append(Graph).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlText: ").Append(UrlText).Append("\n");
            sb.Append("  SubItems: ").Append(SubItems).Append("\n");
            sb.Append("  IsPositive: ").Append(IsPositive).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  NumIssues: ").Append(NumIssues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AnalysisSummaryItem);
        }

        /// <summary>
        /// Returns true if AnalysisSummaryItem instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalysisSummaryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisSummaryItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Graph == other.Graph ||
                    this.Graph != null &&
                    this.Graph.Equals(other.Graph)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.UrlText == other.UrlText ||
                    this.UrlText != null &&
                    this.UrlText.Equals(other.UrlText)
                ) && 
                (
                    this.SubItems == other.SubItems ||
                    this.SubItems != null &&
                    this.SubItems.SequenceEqual(other.SubItems)
                ) && 
                (
                    this.IsPositive == other.IsPositive ||
                    this.IsPositive != null &&
                    this.IsPositive.Equals(other.IsPositive)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.CategoryName == other.CategoryName ||
                    this.CategoryName != null &&
                    this.CategoryName.Equals(other.CategoryName)
                ) && 
                (
                    this.NumIssues == other.NumIssues ||
                    this.NumIssues != null &&
                    this.NumIssues.Equals(other.NumIssues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Graph != null)
                    hash = hash * 59 + this.Graph.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.UrlText != null)
                    hash = hash * 59 + this.UrlText.GetHashCode();
                if (this.SubItems != null)
                    hash = hash * 59 + this.SubItems.GetHashCode();
                if (this.IsPositive != null)
                    hash = hash * 59 + this.IsPositive.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.CategoryName != null)
                    hash = hash * 59 + this.CategoryName.GetHashCode();
                if (this.NumIssues != null)
                    hash = hash * 59 + this.NumIssues.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
