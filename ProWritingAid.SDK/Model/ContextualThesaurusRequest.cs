/* 
 * ProWritingAid.API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProWritingAid.SDK.Model
{
    /// <summary>
    /// ContextualThesaurusRequest
    /// </summary>
    [DataContract]
    public partial class ContextualThesaurusRequest : AnalysisRequestBase, IEquatable<ContextualThesaurusRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextualThesaurusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContextualThesaurusRequest(): base(null) { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextualThesaurusRequest" /> class.
        /// </summary>
        /// <param name="Context">the word for the thesaurus call with surrounding context (required).</param>
        /// <param name="ContextStart">the start position of the word to get suggestions for. 0 based (required).</param>
        /// <param name="ContextEnd">the end position of the word to get suggestions for. 0 based. Would be the same as the start pos for a 1 letter word (required).</param>
        public ContextualThesaurusRequest(
            string Context, 
            int? ContextStart, 
            int? ContextEnd,
            RequestCredentials credentials): base(credentials)
        {
            // to ensure "Context" is required (not null)
            if (Context == null)
            {
                throw new InvalidDataException("Context is a required property for ContextualThesaurusRequest and cannot be null");
            }
            else
            {
                this.Context = Context;
            }
            // to ensure "ContextStart" is required (not null)
            if (ContextStart == null)
            {
                throw new InvalidDataException("ContextStart is a required property for ContextualThesaurusRequest and cannot be null");
            }
            else
            {
                this.ContextStart = ContextStart;
            }
            // to ensure "ContextEnd" is required (not null)
            if (ContextEnd == null)
            {
                throw new InvalidDataException("ContextEnd is a required property for ContextualThesaurusRequest and cannot be null");
            }
            else
            {
                this.ContextEnd = ContextEnd;
            }
            if (credentials == null)
            {
                throw new ArgumentNullException(nameof(credentials));
            }
        }
        
        /// <summary>
        /// the word for the thesaurus call with surrounding context
        /// </summary>
        /// <value>the word for the thesaurus call with surrounding context</value>
        [DataMember(Name="Context", EmitDefaultValue=false)]
        public string Context { get; set; }
        /// <summary>
        /// the start position of the word to get suggestions for. 0 based
        /// </summary>
        /// <value>the start position of the word to get suggestions for. 0 based</value>
        [DataMember(Name="ContextStart", EmitDefaultValue=false)]
        public int? ContextStart { get; set; }
        /// <summary>
        /// the end position of the word to get suggestions for. 0 based. Would be the same as the start pos for a 1 letter word
        /// </summary>
        /// <value>the end position of the word to get suggestions for. 0 based. Would be the same as the start pos for a 1 letter word</value>
        [DataMember(Name="ContextEnd", EmitDefaultValue=false)]
        public int? ContextEnd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContextualThesaurusRequest {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ContextStart: ").Append(ContextStart).Append("\n");
            sb.Append("  ContextEnd: ").Append(ContextEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContextualThesaurusRequest);
        }

        /// <summary>
        /// Returns true if ContextualThesaurusRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ContextualThesaurusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContextualThesaurusRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Context == other.Context ||
                    this.Context != null &&
                    this.Context.Equals(other.Context)
                ) && 
                (
                    this.ContextStart == other.ContextStart ||
                    this.ContextStart != null &&
                    this.ContextStart.Equals(other.ContextStart)
                ) && 
                (
                    this.ContextEnd == other.ContextEnd ||
                    this.ContextEnd != null &&
                    this.ContextEnd.Equals(other.ContextEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Context != null)
                    hash = hash * 59 + this.Context.GetHashCode();
                if (this.ContextStart != null)
                    hash = hash * 59 + this.ContextStart.GetHashCode();
                if (this.ContextEnd != null)
                    hash = hash * 59 + this.ContextEnd.GetHashCode();
                return hash;
            }
        }
    }

}
