/* 
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ProWritingAid.SDK.Client.SwaggerDateConverter;

namespace ProWritingAid.SDK.Model
{
    /// <summary>
    /// TextAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class TextAnalysisRequest :  IEquatable<TextAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Document&#39;s writing style
        /// </summary>
        /// <value>Document&#39;s writing style</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            
            /// <summary>
            /// Enum NotSet for "NotSet"
            /// </summary>
            [EnumMember(Value = "NotSet")]
            NotSet,
            
            /// <summary>
            /// Enum General for "General"
            /// </summary>
            [EnumMember(Value = "General")]
            General,
            
            /// <summary>
            /// Enum Academic for "Academic"
            /// </summary>
            [EnumMember(Value = "Academic")]
            Academic,
            
            /// <summary>
            /// Enum Business for "Business"
            /// </summary>
            [EnumMember(Value = "Business")]
            Business,
            
            /// <summary>
            /// Enum Technical for "Technical"
            /// </summary>
            [EnumMember(Value = "Technical")]
            Technical,
            
            /// <summary>
            /// Enum Creative for "Creative"
            /// </summary>
            [EnumMember(Value = "Creative")]
            Creative,
            
            /// <summary>
            /// Enum Casual for "Casual"
            /// </summary>
            [EnumMember(Value = "Casual")]
            Casual,
            
            /// <summary>
            /// Enum Web for "Web"
            /// </summary>
            [EnumMember(Value = "Web")]
            Web
        }

        /// <summary>
        /// Document&#39;s language  Set correct UK/US language to get region-specific suggestions
        /// </summary>
        /// <value>Document&#39;s language  Set correct UK/US language to get region-specific suggestions</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum EnUS for "en_US"
            /// </summary>
            [EnumMember(Value = "en_US")]
            EnUS,
            
            /// <summary>
            /// Enum EnUK for "en_UK"
            /// </summary>
            [EnumMember(Value = "en_UK")]
            EnUK,
            
            /// <summary>
            /// Enum En for "en"
            /// </summary>
            [EnumMember(Value = "en")]
            En,
            
            /// <summary>
            /// Enum Es for "es"
            /// </summary>
            [EnumMember(Value = "es")]
            Es
        }

        /// <summary>
        /// Document&#39;s writing style
        /// </summary>
        /// <value>Document&#39;s writing style</value>
        [DataMember(Name="Style", EmitDefaultValue=false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Document&#39;s language  Set correct UK/US language to get region-specific suggestions
        /// </summary>
        /// <value>Document&#39;s language  Set correct UK/US language to get region-specific suggestions</value>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextAnalysisRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextAnalysisRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextAnalysisRequest" /> class.
        /// </summary>
        /// <param name="Text">Text to be processed (required).</param>
        /// <param name="Reports">List of reports     List of currently supported reports:  acronym,alliteration,allrepeats,allsentences,  cliche,closerepeat,combo,complex,consistency,  core,corporate,dialog,diction,dva,eloquence,  grammar,grammarplus,homonym,house,initial,nlp,  overused,overusedonly,overview,pacing,passive,  phrases,plagiarism,plength,preadability,slength,  ssentences,ssentences_noglue,structure,thesaurus,  transition,vague,wordcloud,wordsandphrases,wordsphrases    EXAMPLE: [\&quot;grammar\&quot;,\&quot;overused\&quot;] (required).</param>
        /// <param name="Style">Document&#39;s writing style (required) (default to StyleEnum.General).</param>
        /// <param name="Language">Document&#39;s language  Set correct UK/US language to get region-specific suggestions (required) (default to LanguageEnum.En).</param>
        public TextAnalysisRequest(string Text = default(string), List<string> Reports = default(List<string>), StyleEnum? Style = StyleEnum.General, LanguageEnum? Language = LanguageEnum.En)
        {
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for TextAnalysisRequest and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            // to ensure "Reports" is required (not null)
            if (Reports == null)
            {
                throw new InvalidDataException("Reports is a required property for TextAnalysisRequest and cannot be null");
            }
            else
            {
                this.Reports = Reports;
            }
            // to ensure "Style" is required (not null)
            if (Style == null)
            {
                throw new InvalidDataException("Style is a required property for TextAnalysisRequest and cannot be null");
            }
            else
            {
                this.Style = Style;
            }
            // to ensure "Language" is required (not null)
            if (Language == null)
            {
                throw new InvalidDataException("Language is a required property for TextAnalysisRequest and cannot be null");
            }
            else
            {
                this.Language = Language;
            }
        }
        
        /// <summary>
        /// Text to be processed
        /// </summary>
        /// <value>Text to be processed</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// List of reports     List of currently supported reports:  acronym,alliteration,allrepeats,allsentences,  cliche,closerepeat,combo,complex,consistency,  core,corporate,dialog,diction,dva,eloquence,  grammar,grammarplus,homonym,house,initial,nlp,  overused,overusedonly,overview,pacing,passive,  phrases,plagiarism,plength,preadability,slength,  ssentences,ssentences_noglue,structure,thesaurus,  transition,vague,wordcloud,wordsandphrases,wordsphrases    EXAMPLE: [\&quot;grammar\&quot;,\&quot;overused\&quot;]
        /// </summary>
        /// <value>List of reports     List of currently supported reports:  acronym,alliteration,allrepeats,allsentences,  cliche,closerepeat,combo,complex,consistency,  core,corporate,dialog,diction,dva,eloquence,  grammar,grammarplus,homonym,house,initial,nlp,  overused,overusedonly,overview,pacing,passive,  phrases,plagiarism,plength,preadability,slength,  ssentences,ssentences_noglue,structure,thesaurus,  transition,vague,wordcloud,wordsandphrases,wordsphrases    EXAMPLE: [\&quot;grammar\&quot;,\&quot;overused\&quot;]</value>
        [DataMember(Name="Reports", EmitDefaultValue=false)]
        public List<string> Reports { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextAnalysisRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Reports: ").Append(Reports).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TextAnalysisRequest);
        }

        /// <summary>
        /// Returns true if TextAnalysisRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of TextAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextAnalysisRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Reports == other.Reports ||
                    this.Reports != null &&
                    this.Reports.SequenceEqual(other.Reports)
                ) && 
                (
                    this.Style == other.Style ||
                    this.Style != null &&
                    this.Style.Equals(other.Style)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Reports != null)
                    hash = hash * 59 + this.Reports.GetHashCode();
                if (this.Style != null)
                    hash = hash * 59 + this.Style.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
