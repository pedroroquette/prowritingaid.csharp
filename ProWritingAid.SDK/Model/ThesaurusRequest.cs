/* 
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ProWritingAid.SDK.Client.SwaggerDateConverter;

namespace ProWritingAid.SDK.Model
{
    /** 
    * <summary>ThesaurusRequest</summary> 
    */
    [DataContract]
    public partial class ThesaurusRequest :  IEquatable<ThesaurusRequest>, IValidatableObject
    {
        /// <summary>
        /// the language used
        /// </summary>
        /// <value>the language used</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum EnUS for "en_US"
            /// </summary>
            [EnumMember(Value = "en_US")]
            EnUS,
            
            /// <summary>
            /// Enum EnUK for "en_UK"
            /// </summary>
            [EnumMember(Value = "en_UK")]
            EnUK,
            
            /// <summary>
            /// Enum En for "en"
            /// </summary>
            [EnumMember(Value = "en")]
            En,
            
            /// <summary>
            /// Enum Es for "es"
            /// </summary>
            [EnumMember(Value = "es")]
            Es
        }

        /// <summary>
        /// the language used
        /// </summary>
        /// <value>the language used</value>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThesaurusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThesaurusRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThesaurusRequest" /> class.
        /// </summary>
        /// <param name="Word">the word for the thesaurus call (required).</param>
        /// <param name="Language">the language used (required) (default to LanguageEnum.En).</param>
        public ThesaurusRequest(string Word = default(string), LanguageEnum? Language = LanguageEnum.En)
        {
            // to ensure "Word" is required (not null)
            if (Word == null)
            {
                throw new InvalidDataException("Word is a required property for ThesaurusRequest and cannot be null");
            }
            else
            {
                this.Word = Word;
            }
            // to ensure "Language" is required (not null)
            if (Language == null)
            {
                throw new InvalidDataException("Language is a required property for ThesaurusRequest and cannot be null");
            }
            else
            {
                this.Language = Language;
            }
        }
        
        /// <summary>
        /// the word for the thesaurus call
        /// </summary>
        /// <value>the word for the thesaurus call</value>
        [DataMember(Name="Word", EmitDefaultValue=false)]
        public string Word { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThesaurusRequest {\n");
            sb.Append("  Word: ").Append(Word).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ThesaurusRequest);
        }

        /// <summary>
        /// Returns true if ThesaurusRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ThesaurusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThesaurusRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Word == other.Word ||
                    this.Word != null &&
                    this.Word.Equals(other.Word)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Word != null)
                    hash = hash * 59 + this.Word.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
