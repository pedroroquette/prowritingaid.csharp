/* 
 * ProWritingAid.API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProWritingAid.SDK.Model
{
    /// <summary>
    /// DocTag
    /// </summary>
    [DataContract]
    public partial class DocTag :  IEquatable<DocTag>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocTag" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocTag() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocTag" /> class.
        /// </summary>
        /// <param name="StartPos">The start position of the suggestion. 0 based (required).</param>
        /// <param name="EndPos">The end position of the suggestion. 0 based (required).</param>
        /// <param name="Report">Report Id.</param>
        /// <param name="Urls">List of source documents found by plagiarism checker.</param>
        /// <param name="Category">Suggestion&#39;s category.</param>
        /// <param name="CategoryDisplayName">Suggetsion&#39;s category display name.</param>
        /// <param name="Subcategory">Suggestion&#39;s subcategory.</param>
        /// <param name="Hint">Short suggestion&#39;s description.</param>
        /// <param name="Suggestions">List of possible replacements.</param>
        /// <param name="IsSubTag">Identifies that this suggestion is a part of larger one (required).</param>
        /// <param name="HelpId">TODO DOCS.</param>
        /// <param name="Id">Suggestion&#39;s Id.</param>
        public DocTag(int? StartPos = null, int? EndPos = null, string Report = null, List<string> Urls = null, string Category = null, string CategoryDisplayName = null, string Subcategory = null, string Hint = null, List<string> Suggestions = null, bool? IsSubTag = null, string HelpId = null, string Id = null)
        {
            // to ensure "StartPos" is required (not null)
            if (StartPos == null)
            {
                throw new InvalidDataException("StartPos is a required property for DocTag and cannot be null");
            }
            else
            {
                this.StartPos = StartPos;
            }
            // to ensure "EndPos" is required (not null)
            if (EndPos == null)
            {
                throw new InvalidDataException("EndPos is a required property for DocTag and cannot be null");
            }
            else
            {
                this.EndPos = EndPos;
            }
            // to ensure "IsSubTag" is required (not null)
            if (IsSubTag == null)
            {
                throw new InvalidDataException("IsSubTag is a required property for DocTag and cannot be null");
            }
            else
            {
                this.IsSubTag = IsSubTag;
            }
            this.Report = Report;
            this.Urls = Urls;
            this.Category = Category;
            this.CategoryDisplayName = CategoryDisplayName;
            this.Subcategory = Subcategory;
            this.Hint = Hint;
            this.Suggestions = Suggestions;
            this.HelpId = HelpId;
            this.Id = Id;
        }
        
        /// <summary>
        /// The start position of the suggestion. 0 based
        /// </summary>
        /// <value>The start position of the suggestion. 0 based</value>
        [DataMember(Name="startPos", EmitDefaultValue=false)]
        public int? StartPos { get; set; }
        /// <summary>
        /// The end position of the suggestion. 0 based
        /// </summary>
        /// <value>The end position of the suggestion. 0 based</value>
        [DataMember(Name="endPos", EmitDefaultValue=false)]
        public int? EndPos { get; set; }
        /// <summary>
        /// Report Id
        /// </summary>
        /// <value>Report Id</value>
        [DataMember(Name="report", EmitDefaultValue=false)]
        public string Report { get; set; }
        /// <summary>
        /// List of source documents found by plagiarism checker
        /// </summary>
        /// <value>List of source documents found by plagiarism checker</value>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public List<string> Urls { get; set; }
        /// <summary>
        /// Suggestion&#39;s category
        /// </summary>
        /// <value>Suggestion&#39;s category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Suggetsion&#39;s category display name
        /// </summary>
        /// <value>Suggetsion&#39;s category display name</value>
        [DataMember(Name="categoryDisplayName", EmitDefaultValue=false)]
        public string CategoryDisplayName { get; set; }
        /// <summary>
        /// Suggestion&#39;s subcategory
        /// </summary>
        /// <value>Suggestion&#39;s subcategory</value>
        [DataMember(Name="subcategory", EmitDefaultValue=false)]
        public string Subcategory { get; set; }
        /// <summary>
        /// Short suggestion&#39;s description
        /// </summary>
        /// <value>Short suggestion&#39;s description</value>
        [DataMember(Name="hint", EmitDefaultValue=false)]
        public string Hint { get; set; }
        /// <summary>
        /// List of possible replacements
        /// </summary>
        /// <value>List of possible replacements</value>
        [DataMember(Name="suggestions", EmitDefaultValue=false)]
        public List<string> Suggestions { get; set; }
        /// <summary>
        /// Identifies that this suggestion is a part of larger one
        /// </summary>
        /// <value>Identifies that this suggestion is a part of larger one</value>
        [DataMember(Name="isSubTag", EmitDefaultValue=false)]
        public bool? IsSubTag { get; set; }
        /// <summary>
        /// TODO DOCS
        /// </summary>
        /// <value>TODO DOCS</value>
        [DataMember(Name="helpId", EmitDefaultValue=false)]
        public string HelpId { get; set; }
        /// <summary>
        /// Suggestion&#39;s Id
        /// </summary>
        /// <value>Suggestion&#39;s Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocTag {\n");
            sb.Append("  StartPos: ").Append(StartPos).Append("\n");
            sb.Append("  EndPos: ").Append(EndPos).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryDisplayName: ").Append(CategoryDisplayName).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("  Suggestions: ").Append(Suggestions).Append("\n");
            sb.Append("  IsSubTag: ").Append(IsSubTag).Append("\n");
            sb.Append("  HelpId: ").Append(HelpId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocTag);
        }

        /// <summary>
        /// Returns true if DocTag instances are equal
        /// </summary>
        /// <param name="other">Instance of DocTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocTag other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartPos == other.StartPos ||
                    this.StartPos != null &&
                    this.StartPos.Equals(other.StartPos)
                ) && 
                (
                    this.EndPos == other.EndPos ||
                    this.EndPos != null &&
                    this.EndPos.Equals(other.EndPos)
                ) && 
                (
                    this.Report == other.Report ||
                    this.Report != null &&
                    this.Report.Equals(other.Report)
                ) && 
                (
                    this.Urls == other.Urls ||
                    this.Urls != null &&
                    this.Urls.SequenceEqual(other.Urls)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.CategoryDisplayName == other.CategoryDisplayName ||
                    this.CategoryDisplayName != null &&
                    this.CategoryDisplayName.Equals(other.CategoryDisplayName)
                ) && 
                (
                    this.Subcategory == other.Subcategory ||
                    this.Subcategory != null &&
                    this.Subcategory.Equals(other.Subcategory)
                ) && 
                (
                    this.Hint == other.Hint ||
                    this.Hint != null &&
                    this.Hint.Equals(other.Hint)
                ) && 
                (
                    this.Suggestions == other.Suggestions ||
                    this.Suggestions != null &&
                    this.Suggestions.SequenceEqual(other.Suggestions)
                ) && 
                (
                    this.IsSubTag == other.IsSubTag ||
                    this.IsSubTag != null &&
                    this.IsSubTag.Equals(other.IsSubTag)
                ) && 
                (
                    this.HelpId == other.HelpId ||
                    this.HelpId != null &&
                    this.HelpId.Equals(other.HelpId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartPos != null)
                    hash = hash * 59 + this.StartPos.GetHashCode();
                if (this.EndPos != null)
                    hash = hash * 59 + this.EndPos.GetHashCode();
                if (this.Report != null)
                    hash = hash * 59 + this.Report.GetHashCode();
                if (this.Urls != null)
                    hash = hash * 59 + this.Urls.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.CategoryDisplayName != null)
                    hash = hash * 59 + this.CategoryDisplayName.GetHashCode();
                if (this.Subcategory != null)
                    hash = hash * 59 + this.Subcategory.GetHashCode();
                if (this.Hint != null)
                    hash = hash * 59 + this.Hint.GetHashCode();
                if (this.Suggestions != null)
                    hash = hash * 59 + this.Suggestions.GetHashCode();
                if (this.IsSubTag != null)
                    hash = hash * 59 + this.IsSubTag.GetHashCode();
                if (this.HelpId != null)
                    hash = hash * 59 + this.HelpId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
