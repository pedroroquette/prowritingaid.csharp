/* 
 * ProWritingAid API V2
 *
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using RestSharp;
using NUnit.Framework;
using ProWritingAid.SDK.Client;
using ProWritingAid.SDK.Api;
using ProWritingAid.SDK.Model;

namespace ProWritingAid.SDK.Test
{
    /// <summary>
    ///  Class for testing TextApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TextApiTests
    {
        private TextApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init() { instance = new TextApi(); }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup() { }

        /// <summary>
        /// Test an instance of TextApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TextApi
            //Assert.IsInstanceOfType(typeof(TextApi), instance, "instance is a TextApi");
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            var api = new TextAsyncApi()
                .SetLicenseCode("00000000-0000-0000-0000-000000000000");
            var request = new TextAnalysisRequest(
                "I'd like to by that toy. wood you help me? I have twp more brothers.",
                new List<string> {"grammar"},
                TextAnalysisRequest.StyleEnum.General,
                TextAnalysisRequest.LanguageEnum.En);

            try
            {
                var response = api.Post(request);
                Debug.WriteLine(JsonConvert.SerializeObject(response, Formatting.Indented));
            } catch (Exception e)
            {
                Debug.Print("Exception when calling TextApi.TextPost: " + e.Message);
                throw;
            }
        }

        /// <summary>
        /// Test Post
        /// </summary>
        [Test]
        public void PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TextAnalysisRequest request = null;
            //var response = instance.Post(request);
            //Assert.IsInstanceOf<AsyncResponseTextAnalysisResponse> (response, "response is AsyncResponseTextAnalysisResponse");
        }
    }
}